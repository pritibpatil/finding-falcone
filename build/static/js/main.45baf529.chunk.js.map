{"version":3,"sources":["store/actions/actions.js","store/actions/destinations.js","components/Vehicle.js","components/Destinations.js","store/constants.js","store/actions/planets.js","store/actions/vehicles.js","store/actions/findFalcone.js","components/App.js","components/NotFound.js","components/Result.js","store/actions/errors.js","components/ErrorNotification.js","Routers/Routers.js","serviceWorker.js","store/reducers/planetsReducer.js","store/reducers/vehiclesReducer.js","store/reducers/destinationsReducer.js","store/reducers/findFalconeReducer.js","store/reducers/errorReducer.js","store/reducers/reducer.js","store/middleware/api.js","index.js","store/configureStore.js"],"names":["fetchPlanetsAction","createAction","fetchVehiclesAction","getInitialDestinationsAction","addDestinationAction","vehicleSelectedAction","findFalconeAction","fetchTokenAction","resetErrorAction","getTimeTaken","state","timetaken","Object","keys","destinations","forEach","key","curr_time","Vehicle","onVehicleSelect","event","distance","getCurrentPlanet","vehicleObj","props","vehicles","filter","veh","name","target","value","time","length","speed","vehicleSelected","selectedVehicle","destination","destinationGroup","currentDest","currentPlanet","selectedPlanet","planets","planet","getIsRangeLess","vehicleMaxDistance","this","className","map","vehicle","index","indexOf","isRangeLess","max_distance","FormControlLabel","control","Radio","color","label","total_no","type","onClick","disabled","React","Component","connect","dispatch","data","Destinations","onDestinationChange","addDestination","currentTarget","showVehicle","getClassName","optionItems","selectedValue","FormControl","InputLabel","htmlFor","NativeSelect","onChange","RadioGroup","getAvailablePlanets","selectedPlanets","dest","push","getSelectedPlanets","i","getAvailableVehicles","vehObj","availableVehicles","JSON","parse","stringify","getSelectedVehicles","selectedVehicles","App","onReset","getInitialDestinations","isAllSelected","planet_names","vehicle_names","findFalcone","getToken","token","requestBody","goToResult","history","pathname","response","fetchPlanets","fetchVehicles","error","Container","Grid","container","spacing","item","xs","md","lg","Paper","CircularProgress","justify","alignItems","sm","Card","variant","CardContent","Typography","gutterBottom","component","CardActions","Button","size","payload","url","onSuccess","onError","axios","defaults","headers","common","post","then","catch","requestPayload","method","NotFound","Result","ontryAgainClick","result","location","isSuccess","status","planet_name","ErrorNotification","resetError","Routers","exact","path","Boolean","window","hostname","match","reducer","createReducer","action","combineReducers","planetsReducer","vehiclesReducer","destinationReducer","findFalconeReducer","errorReducer","api","next","request","baseURL","message","store","configureStore","middleware","getDefaultMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.45baf529.chunk.js","sourcesContent":["import { createAction} from \"@reduxjs/toolkit\";\n\nexport const fetchPlanetsAction = createAction(\"fetchPlanetsAction\");\n\nexport const fetchVehiclesAction = createAction(\"fetchVehiclesAction\");\n\nexport const getInitialDestinationsAction = createAction(\"getInitialDestinations\");\nexport const addDestinationAction = createAction(\"addDestination\");\nexport const vehicleSelectedAction = createAction(\"vehicleSelected\");\n\nexport const findFalconeAction = createAction(\"findFalconeAction\");\n\nexport const fetchTokenAction = createAction(\"fetchTokenAction\");\n\nexport const onError = createAction(\"onError\");\nexport const resetErrorAction = createAction(\"resetErrorAction\");\n\n ","import {getInitialDestinationsAction, addDestinationAction, vehicleSelectedAction} from \"./actions\";\nimport {NUMBER_OF_DESTINATIONS} from \"../constants\";\n\n//actions\nexport const getInitialDestinations = () => (dispatch) => {\n  const destinations = [];\n  for (let i=1; i <= NUMBER_OF_DESTINATIONS ;i++){\n    destinations.push(\"destination\"+i);\n  }\n  dispatch(getInitialDestinationsAction(destinations))\n};\n\nexport const addDestination = (data) => (dispatch) => {\n  dispatch(addDestinationAction(data));\n};\n\nexport const vehicleSelected = (data) => (dispatch) => {\n  dispatch(vehicleSelectedAction(data));\n};\n\n\nexport const getTimeTaken = state => {\n  let timetaken = 0;\n  Object.keys(state.destinations).forEach((key) => {\n    if (state.destinations[key]) {\n      let curr_time = state.destinations[key].timetaken;\n      if (curr_time) {\n        timetaken += curr_time;\n      }\n    }\n  });\n  return timetaken;\n}","import React from \"react\";\nimport \"../css/AppStyle.css\";\nimport PropTypes from \"prop-types\";\nimport { vehicleSelected } from \"../store/actions/destinations\";\nimport { connect } from \"react-redux\";\n\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\n\nclass Vehicle extends React.Component {\n  static propTypes = {\n    vehicles: PropTypes.array,\n    destinationGroup: PropTypes.string,\n  };\n\n  onVehicleSelect = (event) => {\n    let selectedPlanet = this.getCurrentPlanet();\n    let distance = selectedPlanet[0].distance;\n    let vehicleObj = this.props.vehicles.filter(\n      (veh) => veh.name === event.target.value\n    );\n    let speed = vehicleObj.length ? vehicleObj[0].speed : 1;\n    let time = distance / speed;\n\n    this.props.vehicleSelected({\n      timetaken: time,\n      selectedVehicle: event.target.value,\n      destination: this.props.destinationGroup,\n    });\n  };\n  getCurrentPlanet = () => {\n    let state = this.props.state;\n    let currentDest = this.props.destinationGroup;\n    let currentPlanet = state.destinations[currentDest].selectedPlanet;\n    return state.planets.filter((planet) => planet.name === currentPlanet);\n  };\n  getIsRangeLess = (vehicleMaxDistance) => {\n    let planet = this.getCurrentPlanet();\n    let distance = planet[0] ? planet[0].distance : 0;\n    return distance > vehicleMaxDistance;\n  };\n\n  render() {\n    const vehicles = this.props.vehicles;\n    return (\n      <div className=\"vehicleList\">\n        {vehicles.map((vehicle) => {\n          let index = vehicles.indexOf(vehicle);\n          let isRangeLess = this.getIsRangeLess(vehicle.max_distance);\n          return (\n            <div key={index}>\n              <FormControlLabel\n                  control={<Radio color=\"primary\"/>}\n                  label={`${vehicle.name} (${vehicle.total_no})`}\n                  key={vehicles.indexOf(vehicle)}\n                  type=\"radio\"\n                  value={vehicle.name}\n                  onClick={this.onVehicleSelect}\n                  speed={vehicle.speed}\n                  disabled={vehicle.total_no === 0 || isRangeLess ? true : false}\n                  />\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  state,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  vehicleSelected: (data) => {\n    dispatch(vehicleSelected(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Vehicle);\n","import React from \"react\";\nimport \"../css/AppStyle.css\";\nimport Vehicle from \"../components/Vehicle\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { addDestination } from \"../store/actions/destinations\";\nimport { SELECT_DEST_MSG } from \"../store/constants\";\n\nimport InputLabel from \"@material-ui/core/InputLabel\";\nimport FormControl from \"@material-ui/core/FormControl\";\nimport NativeSelect from \"@material-ui/core/NativeSelect\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\n\nexport class Destinations extends React.Component {\n  static propTypes = {\n    planets: PropTypes.array,\n    vehicles: PropTypes.array,\n    index: PropTypes.string,\n  };\n\n  onDestinationChange = (event) => {\n    this.props.addDestination({\n      destination: this.props.index,\n      value: event.currentTarget.value,\n    });\n  };\n\n  showVehicle = () => {\n    let destinations = this.props.state.destinations;\n    let currentDest = destinations[this.props.index];\n    return currentDest.selectedPlanet ? true : false;\n  };\n\n  getClassName = () => {\n    let destinations = this.props.state.destinations;\n    let currentDest = destinations[this.props.index];\n    return currentDest.selectedVehicle ? \"selected\" : \"unselected\";\n  };\n\n  render() {\n    let planets = this.props.planets;\n    let optionItems = planets.map((planet) => (\n      <option key={planet.name}>{planet.name}</option>\n    ));\n    let selectedValue =\n      this.props.state.destinations[this.props.index].selectedPlanet ||\n      SELECT_DEST_MSG;\n\n    return (\n      <div className=\"destination\">\n        <FormControl className=\"destinationSelect\">\n          <InputLabel className={this.getClassName()} htmlFor=\"outlined-age-native-simple\">\n            {SELECT_DEST_MSG}\n          </InputLabel>\n          <NativeSelect value={selectedValue} onChange={this.onDestinationChange} label=\"Destination\">\n            <option value={selectedValue}>{selectedValue}</option>\n            {optionItems}\n          </NativeSelect>\n        </FormControl>\n\n        {this.showVehicle() && (\n          <RadioGroup name={this.props.index}>\n            <Vehicle vehicles={this.props.vehicles} destinationGroup={this.props.index} ></Vehicle>\n          </RadioGroup>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  state,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  addDestination: (data) => {\n    dispatch(addDestination(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Destinations);\n","export const PLANET_API = \"/planets\";\nexport const VEHICLE_API = \"/vehicles\";\nexport const AUTH_TOKEN_URL = \"https://findfalcone.herokuapp.com/token\";\nexport const FIND_FALCONE_API = \"https://findfalcone.herokuapp.com/find\";\nexport const baseURL = \"https://findfalcone.herokuapp.com/\";\n\nexport const SUCCESS_MSG = \"Success! Congratulations on Finding Falcone. King Shan is mighty pleased.\";\nexport const FAILED_MSG = \"Falcone is not found! Please try again.\";\n\nexport const NUMBER_OF_DESTINATIONS = 4;\nexport const FIND_FALCONE_FAILED_MSG = \"Find Falcone Action Failed\";\nexport const NOT_SELECTED_MSG= \"Not all planets and vehicles selected\";\nexport const SELECT_DEST_MSG=\"Select Destination\";\nexport const FETCH_TOKEN_FAILED_MSG = \"Fetch Token Failed\";\nexport const FETCH_PLANETS_FAILED_MSG = \"Fetch Planets Failed\";\nexport const FETCH_VEHICLES_FAILED_MSG = \"Fetch Vehicles Failed\";\n\n\n","import {FETCH_PLANETS_FAILED_MSG, PLANET_API} from \"../constants\";\n\nimport {fetchPlanetsAction} from \"./actions\";\n// import {planetsReducer} from \"../reducers/planetsReducer\"\n\n//actions\n\nexport const fetchPlanets = () => async (dispatch) => {\n    return dispatch({\n      type: \"apiCallBegan\",\n      payload: {\n        url : PLANET_API,\n        onSuccess: fetchPlanetsAction.type,\n        onError: FETCH_PLANETS_FAILED_MSG\n      }\n    })\n};\n\n//selector\nexport const getAvailablePlanets = state => {\n  const selectedPlanets = [];\n  Object.keys(state.destinations).forEach(dest => {\n    const selectedPlanet = state.destinations[dest].selectedPlanet;\n    if (selectedPlanet) {\n      selectedPlanets.push(state.destinations[dest].selectedPlanet);\n    }\n  });\n  // eslint-disable-next-line\n  return state.planets.filter(planet => {\n    const index = selectedPlanets.indexOf(planet.name);\n    if (index === -1){\n      return planet;\n    } \n  });\n}\n\nexport const getSelectedPlanets = state => {\n  let selectedPlanets = [];\n  let destinations = state.destinations;\n    Object.keys(destinations).forEach(key => {\n      let dest = destinations[key];\n      if (dest.selectedPlanet ){\n        selectedPlanets.push(dest.selectedPlanet);\n      }\n    });\n    return selectedPlanets\n}\n\n","import {FETCH_VEHICLES_FAILED_MSG, VEHICLE_API} from \"../constants\";\nimport {fetchVehiclesAction} from \"./actions\";\n\n//actioncreators\n\nexport const fetchVehicles = () => async (dispatch) => {\n    return dispatch({\n      type: \"apiCallBegan\",\n      payload: {\n        url : VEHICLE_API,\n        onSuccess: fetchVehiclesAction.type,\n        onError: FETCH_VEHICLES_FAILED_MSG,\n      }\n    });\n};\n\nexport const getAvailableVehicles = state => {\n  let vehObj = {};\n  Object.keys(state.destinations).forEach(key => {\n    let dest = state.destinations[key];\n    if (dest.selectedVehicle) {\n      let vehicle = dest.selectedVehicle;\n      vehObj[vehicle] = vehObj[vehicle] ? vehObj[vehicle]+1 : 1;\n    }\n  });\n\n  let availableVehicles = JSON.parse(JSON.stringify(state.vehicles));\n  availableVehicles.forEach(veh=> {\n    if (vehObj[veh.name]) {\n      veh.total_no -=  vehObj[veh.name];\n    }\n  });\n  return availableVehicles;\n}\n\nexport const getSelectedVehicles = state => {\n  let selectedVehicles = [];\n  let destinations = state.destinations;\n    Object.keys(destinations).forEach(key => {\n      let dest = destinations[key];\n      if (dest.selectedVehicle ){\n        selectedVehicles.push(dest.selectedVehicle);\n      }\n    });\n    return selectedVehicles\n}","import axios from \"axios\";\nimport * as url from \"../constants\";\nimport { findFalconeAction, fetchTokenAction } from \"./actions\";\n\n//actions\nimport {\n  NUMBER_OF_DESTINATIONS,\n  FIND_FALCONE_FAILED_MSG,\n  NOT_SELECTED_MSG,\n  FETCH_TOKEN_FAILED_MSG,\n} from \"../constants\";\n\nexport const findFalcone = (requestPayload) => async (dispatch) => {\n  if (\n    requestPayload.planet_names &&\n    requestPayload.planet_names.length !== NUMBER_OF_DESTINATIONS &&\n    requestPayload.vehicle_names &&\n    requestPayload.vehicle_names.length !== NUMBER_OF_DESTINATIONS\n  ) {\n    dispatch({\n      type: \"onError\",\n      error: NOT_SELECTED_MSG,\n    });\n    return;\n  }\n\n  return dispatch({\n    type: \"apiCallBegan\",\n    payload: {\n      url: url.FIND_FALCONE_API,\n      method: \"post\",\n      data: requestPayload,\n      onSuccess: findFalconeAction.type,\n      onError: FIND_FALCONE_FAILED_MSG,\n    },\n  });\n};\n\nexport const getToken = () => async (dispatch) => {\n  axios.defaults.headers.common[\"Accept\"] = \"application/json\";\n\n  return await axios\n    .post(url.AUTH_TOKEN_URL)\n    .then((response) => {\n      dispatch(fetchTokenAction(response.data));\n    })\n    .catch((error) => {\n      dispatch({\n        type: \"onError\",\n        error: FETCH_TOKEN_FAILED_MSG,\n      });\n    });\n};\n","import React from \"react\";\nimport Destinations from \"./Destinations\";\nimport \"../css/AppStyle.css\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport {\n  fetchPlanets,\n  getAvailablePlanets,\n  getSelectedPlanets,\n} from \"../store/actions/planets\";\nimport {\n  fetchVehicles,\n  getAvailableVehicles,\n  getSelectedVehicles,\n} from \"../store/actions/vehicles\";\nimport {\n  getInitialDestinations,\n  getTimeTaken,\n} from \"../store/actions/destinations\";\nimport { findFalcone, getToken } from \"../store/actions/findFalcone\";\nimport { NUMBER_OF_DESTINATIONS } from \"../store/constants\";\nimport Button from \"@material-ui/core/Button\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\n\nclass App extends React.Component {\n  static propTypes = {\n    history: PropTypes.object,\n  };\n\n  async componentDidMount() {\n    await this.props.fetchPlanets();\n    await this.props.fetchVehicles();\n    this.props.getInitialDestinations();\n  }\n\n  componentDidUpdate() {\n    if (this.props.state.error.error) {\n      this.props.history.push({\n        pathname: \"/error/\",\n        state: {\n          response: this.props.state,\n        },\n      });\n    }\n  }\n\n  onReset = () => {\n    this.props.getInitialDestinations();\n  };\n\n  isAllSelected = () => {\n    let planet_names = getSelectedPlanets(this.props.state);\n    let vehicle_names = getSelectedVehicles(this.props.state);\n    return planet_names.length === NUMBER_OF_DESTINATIONS &&\n      vehicle_names.length === NUMBER_OF_DESTINATIONS \n  };\n\n  findFalcone = async () => {\n    await this.props.getToken();\n    if (this.props.state.findFalcone.token) {\n      let requestBody = {\n        token: this.props.state.findFalcone.token.token,\n        planet_names: getSelectedPlanets(this.props.state),\n        vehicle_names: getSelectedVehicles(this.props.state),\n      };\n      await this.props.findFalcone(requestBody);\n      this.goToResult();\n    }\n  };\n\n  goToResult = () => {\n    this.props.history.push({\n      pathname: \"/result/\",\n      state: {\n        response: this.props.state.findFalcone,\n        timetaken: getTimeTaken(this.props.state),\n      },\n    });\n  };\n\n  render() {\n    return (\n      <Container>\n        <div className=\"app\">\n          <header className=\"header\">Finding Falcone!</header>\n          {this.props.state.planets.length > 0 &&\n          this.props.state.vehicles.length > 0 ? (\n            <Grid container spacing={3}>\n              {Object.keys(this.props.state.destinations).map((dest) => (\n                <Grid key={dest} item xs={12} md={6} lg={3}>\n                  <Paper className=\"paper\">\n                    <Destinations\n                      index={dest}\n                      planets={getAvailablePlanets(this.props.state)}\n                      vehicles={getAvailableVehicles(this.props.state)}\n                    ></Destinations>\n                  </Paper>\n                </Grid>\n              ))}\n            </Grid>\n          ) : <CircularProgress />\n          }\n          <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n            <Grid item xs={12} sm={6} md={4} lg={3}>\n              <Card variant=\"outlined\">\n                <CardContent>\n                  <Typography color=\"textSecondary\" gutterBottom>\n                    Time Taken\n                  </Typography>\n                  <Typography variant=\"h5\" component=\"h2\">\n                    {getTimeTaken(this.props.state)}\n                  </Typography>\n                </CardContent>\n                <CardActions>\n                  <Button\n                    disabled ={!this.isAllSelected()}\n                    variant=\"outlined\"\n                    size=\"medium\"\n                    color=\"primary\"\n                    onClick={this.findFalcone}\n                  >\n                    Find Falcone\n                  </Button>\n                  <Button size=\"medium\" onClick={this.onReset}>\n                    Reset\n                  </Button>\n                </CardActions>\n              </Card>\n            </Grid>\n          </Grid>\n        </div>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  state,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  fetchPlanets: () => {\n    dispatch(fetchPlanets());\n  },\n  fetchVehicles: () => {\n    dispatch(fetchVehicles());\n  },\n  getInitialDestinations: () => {\n    dispatch(getInitialDestinations());\n  },\n  getToken: () => {\n    return dispatch(getToken());\n  },\n  findFalcone: (data) => {\n    return dispatch(findFalcone(data));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react'\n\nconst NotFound = () => (\n    <div>\n        <h2>Not Found!!!</h2>\n    </div>\n);\nexport default NotFound;","import React from \"react\";\nimport \"../css/AppStyle.css\";\nimport PropTypes from \"prop-types\";\nimport {SUCCESS_MSG, FAILED_MSG} from \"../store/constants\";\nimport Button from '@material-ui/core/Button';\nimport \"../css/AppStyle.css\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\n\n\nclass Result extends React.Component {\n  static propTypes = {\n    history: PropTypes.object,\n  };\n\n  ontryAgainClick = () => {\n    this.props.history.push({\n      pathname: \"/\"\n    });\n  };\n\n  render() {\n    const result = this.props.location.state.response.result;\n    const isSuccess =\n      result && result.status === \"success\"\n        ? true\n        : false;\n    const successMsg = SUCCESS_MSG;\n    const failureMsg = FAILED_MSG;\n    const planet = result && result.planet_name;\n\n    return (\n      <Grid container spacing={3} justify=\"center\" alignItems=\"center\">\n          <Grid item xs={12} sm={6} md={4} lg={3}>\n      <Card variant=\"outlined\" className=\"resultDiv\">\n        {!isSuccess ? \n        (\n          <CardContent>\n          <Typography color=\"textSecondary\">{failureMsg}</Typography>\n          </CardContent>\n        ) : \n        (\n          <CardContent>\n            <Typography color=\"textSecondary\">{successMsg}</Typography>\n            <br/>\n            <Typography color=\"textSecondary\" gutterBottom> Time Taken </Typography>\n            <Typography variant=\"h5\" component=\"h3\"> {this.props.history.location.state.timetaken} </Typography>\n            <Typography color=\"textSecondary\" gutterBottom> Planet found </Typography>\n            <Typography variant=\"h5\" component=\"h3\">\n              {planet}\n            </Typography>\n          </CardContent>\n        )}\n        <CardActions>\n            <Button variant=\"outlined\" color=\"primary\" className=\"button tryAgainButton\" onClick={this.ontryAgainClick}>Start Again</Button>\n        </CardActions>\n      </Card>\n      </Grid>\n      </Grid>\n    );\n  }\n}\n\nexport default Result;\n","import { resetErrorAction } from \"./actions\";\n\nexport const resetError = () => async (dispatch) => {\n    dispatch(resetErrorAction())\n};\n","import React from \"react\";\nimport {resetError} from \"../store/actions/errors\";\nimport { connect } from \"react-redux\";\nimport Button from '@material-ui/core/Button';\nimport \"../css/AppStyle.css\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Grid from \"@material-ui/core/Grid\";\n\nclass ErrorNotification extends React.Component{\n    \n    ontryAgainClick = () => {\n        this.props.history.push({\n          pathname: \"/\"\n        });\n        this.props.resetError();\n      };\n\n    render() {\n        const error = this.props.location.state.response.error.error;\n        return (\n            <>\n              {error && (\n                <div className=\"errorDiv\">\n                  <Grid item xs={3}>\n                  <Paper className=\"error\">\n                  <h2>{error}</h2>\n                  <Button variant=\"contained\" className=\"button\" color=\"primary\" onClick={this.ontryAgainClick}>Try Again</Button>\n                  </Paper>\n                  </Grid>\n                </div>\n              )}\n            </>\n          );\n    };\n}\nconst mapStateToProps = (state) => ({\n    state,\n  });\n  const mapDispatchToProps = (dispatch) => ({\n    resetError: () => {\n      dispatch(resetError());\n    }\n  });\n  \n  export default connect(mapStateToProps, mapDispatchToProps)(ErrorNotification);\n  ","import React from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport App from \"../components/App\";\nimport NotFound from \"../components/NotFound\";\nimport Result from \"../components/Result\";\nimport ErrorNotification from \"../components/ErrorNotification\";\n\nexport default function Routers() {\n  return (\n    <Router>\n      <div>\n        <Switch>\n            <Route exact path=\"/\" component={App}/>\n            <Route exact path=\"/result\" component={Result}/>\n            <Route exact path=\"/error\" component={ErrorNotification}/>\n            <Route exact component={NotFound}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { fetchPlanetsAction } from \"../actions/actions\";\n\nconst reducer = createReducer([], {\n  [fetchPlanetsAction.type]: (planets, action) => {\n    return action.payload;\n  },\n});\n\nexport default reducer;\n","import { createReducer} from \"@reduxjs/toolkit\";\nimport {fetchVehiclesAction} from \"../actions/actions\";\n\nconst reducer = createReducer([], {\n    [fetchVehiclesAction.type]: (vehicles, action) => {\n      vehicles.length = 0; //resetting the array\n      action.payload.forEach(veh => {\n        vehicles.push(veh)\n      });\n    }\n  });\n\nexport default reducer;\n\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  getInitialDestinationsAction,\n  addDestinationAction,\n  vehicleSelectedAction,\n} from \"../actions/actions\";\n\nconst reducer = createReducer(\n  {},\n  {\n    [getInitialDestinationsAction.type]: (destinations, action) => {\n      action.payload.forEach((dest) => {\n        destinations[dest] = {};\n      });\n    },\n    [addDestinationAction.type]: (destinations, action) => {\n      destinations[action.payload.destination] = {\n        selectedPlanet: action.payload.value,\n        showVehicle: true,\n      };\n    },\n    [vehicleSelectedAction.type]: (destinations, action) => {\n      const { timetaken, selectedVehicle, destination } = action.payload;\n      destinations[destination].selectedVehicle = selectedVehicle;\n      destinations[destination].timetaken = timetaken;\n    },\n  }\n);\n\nexport default reducer;\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport {\n  findFalconeAction,\n  fetchTokenAction,\n} from \"../actions/actions\";\n\nconst reducer = createReducer(\n  {},\n  {\n    [findFalconeAction.type]: (findFalcone, action) => {\n      findFalcone.result = action.payload;\n    },\n    \n    [fetchTokenAction.type]: (findFalcone, action) => {\n      findFalcone.token = action.payload\n    }\n  }\n);\n\nexport default reducer;\n","import { createReducer } from \"@reduxjs/toolkit\";\nimport { resetErrorAction } from \"../actions/actions\"\n\nconst reducer = createReducer(\n  {},\n  {\n    onError: (error, action) => ({\n      error: action.error,\n    }),\n    [resetErrorAction.type]: (error, action) => ({}),\n  }\n);\n\nexport default reducer;\n","import { combineReducers } from \"redux\";\nimport planetsReducer from \"./planetsReducer\";\nimport vehiclesReducer from \"./vehiclesReducer\";\nimport destinationReducer from \"./destinationsReducer\";\nimport findFalconeReducer from \"./findFalconeReducer\";\nimport  errorReducer  from './errorReducer';\n\nexport default combineReducers({\n    planets : planetsReducer,\n    vehicles : vehiclesReducer,\n    destinations : destinationReducer,\n    findFalcone : findFalconeReducer,\n    error: errorReducer\n});","import axios  from 'axios';\nimport { baseURL } from '../constants';\n\nconst api =  ({dispatch}) => next => async action => {\n    if (action.type !== \"apiCallBegan\") return next(action);\n    \n    next(action);\n    const {url, method, data, onSuccess, onError} = action.payload;\n    try{\n        const response  = await axios.request({\n            baseURL,\n            url,\n            method, \n            data\n        });\n        dispatch({type: onSuccess, payload: response.data});\n    } catch (error) {\n        dispatch({type: \"onError\", error: `${error.message} (${onError})`});\n    }\n\n}\n\nexport default api;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routers from './Routers/Routers'\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from \"./store/configureStore\";\nimport { Provider } from 'react-redux';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store = {store}>\n    <Routers />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n","import { configureStore } from '@reduxjs/toolkit';\nimport reducer from \"../store/reducers/reducer\";\nimport { getDefaultMiddleware } from '@reduxjs/toolkit';\nimport api from \"./middleware/api\"\n\nexport default function () {\n    return configureStore({ \n        reducer,\n        middleware: [\n            ...getDefaultMiddleware(),\n            api\n        ]\n        \n    });\n}\n"],"sourceRoot":""}